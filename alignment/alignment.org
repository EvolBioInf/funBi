#+begin_export latex
DNA sequences change over time by accumulating random mutations. The
most common types of mutation are single nucleotide changes,
insertions, and deletions. By aligning two or more sequences, we can
identify these mutations. In this exercise we show how to calculate
alignments and how mutations are reflected in them.

We start by simulating a random 100\,bp sequence with the program
\ty{ranseq}. To keep this tutorial stable, we seed the random number
generator of \ty{ranseq} with the number 3, but you can leave that out
to get a new sequence. Then we create a copy of the simulated sequence
and save it to a second file called \ty{seq2.fasta}.
#+end_export
#+begin_src sh <<seq.sh>>=
  ranseq -s 3 > seq1.fasta
  cp seq1.fasta seq2.fasta
#+end_src
#+begin_export latex
Here is our simulated sequence, composed of a header and a
sequence. If you did not seed the random number generator of
\ty{ranseq} with 3, your sequence will differ from ours.
\verbatiminput{../alignment/seq.fasta}
#+end_export
#+begin_export latex
By default, single sequences simulated with \ty{ranseq} are named
`Rand1'. Since the two files \ty{seq1.fasta} and \ty{seq2.fasta} are
exact copies, their headers are also identical. To distinguish the two
sequences, we modify the header of the second sequence with the
``stream editor'' program \ty{sed} from `Rand1' to `Rand2', save the
result to the temporary file \ty{tmp}, and move that back to the
original file. Alternatively, you can also modify the header with
\ty{emacs}.
#+end_export
#+begin_src sh <<seq.sh>>=
  sed 's/1/2/' seq2.fasta > tmp
  mv tmp seq2.fasta
#+end_src
#+begin_export latex
We now align our two sequences with the program \ty{al}. The sequences
should align perfectly with a score of 100 and no errors. As you can
see, the alignment is visualized by writing down the nucleotides for
every position in the query (Rand2) and the subject (Rand1). A match
between two nucleotides is marked with vertical lines, `|'.
#+end_export
#+begin_src sh <<seq.sh>>=
  al seq2.fasta seq1.fasta
#+end_src
#+begin_export latex
\verbatiminput{../alignment/al1.txt}

We now randomly mutate 10\% of the second sequence with the program
\ty{mutator}. Again, we seed its random number generator, which you
are free to ignore.
#+end_export
#+begin_src sh <<seq.sh>>=
  mutator -s 5 -m 0.1 seq2.fasta > seq3.fasta
#+end_src
#+begin_export latex
The new header in \ty{seq3.fasta} is now
\begin{verbatim}
>Rand2 - mutated
\end{verbatim}
#+end_export
#+begin_src sh <<seq.sh>>=
  head -n 1 seq3.fasta
#+end_src
#+begin_export latex
We rename the mutated sequence Rand3 by changing the 2 to 3 and
removing everything that comes after it.
#+end_export
#+begin_src sh <<seq.sh>>=
  sed 's/2.*/3/' seq3.fasta > tmp
  mv tmp seq3.fasta
#+end_src
#+begin_export latex
We align \ty{seq3.fasta} and \ty{seq1.fasta}. The two sequences now
contain 5 mismatches, and the alignment score has decreased to
80. Notice that mismatches lack the match mark, `|'.
#+end_export
#+begin_src sh <<seq.sh>>=
  al seq3.fasta seq1.fasta
#+end_src
#+begin_export latex
\verbatiminput{../alignment/al2.txt}

As we already said at the beginning of this section, besides
accumulating point mutations, sequences can also mutate due to
insertions or deletions. To recreate this, we delete the 20
nucleotides 41--60 in \ty{seq3.fasta} by cutting the nucleotides 1--40
and 61--100, and joining the two fragments to form a new
sequence, \ty{seq4.fasta}.
#+end_export
#+begin_src sh <<seq.sh>>=
  cutSeq -j -r 1-20,41-100 seq1.fasta > seq4.fasta
#+end_src
#+begin_src latex
  We rename \ty{seq4.fasta}.
#+end_src
#+begin_src sh <<seq.sh>>=
  sed 's/1.*/4/' seq4.fasta > tmp
  mv tmp seq4.fasta
#+end_src
#+begin_src latex
  We align \ty{seq4.fasta} with its mutated homolog
  \ty{seq3.fasta}. Alignment gaps are marked with hyphens, `-', which
  indicate the absence of an equivalent match in the other sequence. In
  this case, we happen to know that the gap is due to a deletion we made
  in the query, Rand4. However, since the same pattern would appear if
  it was due to an insertion in the subject, Rand3, insertions and
  deletions are often not distinguished and instead collectively called
  `indels'.
#+end_src
#+begin_src sh <<seq.sh>>=
  al seq4.fasta seq3.fasta
#+end_src
#+begin_export latex
\verbatiminput{../alignment/al3.txt}

If instead of a deletion, part of the query sequence was duplicated,
then the gap would be marked in the subject sequence. To recreate such
a duplication, we extract the query region 51--60 twice with
\ty{cutSeq} and save the result in \ty{seq5.fasta}.
#+end_export
#+begin_src sh <<seq.sh>>=
  cutSeq -j -r 1-60,51-60,61-80 seq4.fasta > seq5.fasta
#+end_src
#+begin_src latex
  We rename the sequence in \ty{seq5.fasta}.
#+end_src
#+begin_src sh <<seq.sh>>=
  sed 's/4.*/5/' seq5.fasta > tmp
  mv tmp seq5.fasta
#+end_src
#+begin_src latex
  In the alignment we see the deletion and the duplication as long gaps.
#+end_src
#+begin_src sh <<seq.sh>>=
  al seq5.fasta seq3.fasta
#+end_src
#+begin_export latex
\verbatiminput{../alignment/al4.txt}
#+end_export
