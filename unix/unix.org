#+begin_export latex
Whenever we interact with a computer, what we are really doing is
interacting with an operating system that passes our every wish as
commands to the hardware. Well-known examples of operating systems
include Android, MS-Windows, macOS, and chromeOS. Android, macOS, and
chromeOS belongs to a family of operating systems called Unix. The
first Unix systems were developed in the late 1960s, and today Unix
technology underlies much of our computing infrastructure, ranging
from mobile phones to supercomputers.

The user interface of phones and most desktop computers is
graphical. However, on desktop systems, Unix also comes with a
text-based interface, the ``command line''. On Windows 10 or 11 the
command line can be accessed via the ``Windows Subsystem for Linux'',
WSL, on macOS via the terminal program, and on chromeOS via Linux on
ChromeOS.

The command line interface is used on a daily basis by computer
professionals throughout the world. One of its advantages compared to
graphical user interfaces is that the command line is standardized,
which means that once you have mastered it on one system, you have
mastered it on all.

We begin our exploration of the Unix command line by listing the
contents of our current directory. To do so, enter the following
command, followed by \ty{Enter}. Can you make sense of what you see?
#+end_export
#+begin_src sh <<unix.sh>>=
  ls
#+end_src
#+begin_export latex
We make a new directory for our work in this practical, \ty{funBi};
don't forget to press enter after the following command.
#+end_export
#+begin_src sh <<unix.sh>>=
  mkdir funBi
#+end_src
#+begin_export latex
We change into this directory.
#+end_export
#+begin_src sh <<unix.sh>>=
  cd funBi
#+end_src
#+begin_export latex
Since the command line interface is text-based, we often need to write
or edit text files. For this we use a specialized program, an
editor. There are a number of editors to chose from, we use
\ty{emacs}. This comes in various versions, some with a graphical user
interface, some without. Since setting up the graphical user interface
is occasionally problematic, we run \ty{emacs} without it, that is, we
start \ty{emacs} in ``no window'' mode, \ty{-nw}.
#+end_export
#+begin_src sh <<unix.sh>>=
  emacs -nw hello.txt
#+end_src
#+begin_export latex
Try typing something into \ty{hello.txt}, for example, ``Hello
world''. The question is now, how can we save what we have just typed?
In order to find out, activate the \ty{emacs} menu by pressing F10 on
a PC keyboard or fn-F10 on an Apple keyboard. Can you find out how to
save your text?

The program \ty{emacs} comes with many commands, only a few of which
are really important. Perhaps the three most important commands are
\begin{enumerate}
\item \ty{C-x C-s} to save
\item \ty{C-g} to quit the current command
\item \ty{C-x C-c} to quit \ty{emacs}
\end{enumerate}

A good way to learn \ty{emacs}, is to work through its tutorial. Can
you find the \ty{emacs} tutorial in the menu? Once you've found it,
spend some time doing the first couple of exercises. When you quit the
tutorial, \ty{emacs} asks, whether you'd like to save your current
position. It's a good idea to do so and to come back for more later.

It is also a good idea to keep \ty{emacs} running in one terminal
window and the command line in another, rather than starting and
quitting \ty{emacs} every time a file needs to be edited. Can you
construct such a setup on your system?
#+end_export
